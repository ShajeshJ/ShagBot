//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShagBot {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ShagBot.Resource", typeof(Resource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command will fail if a role with the specified name already exists..
        /// </summary>
        internal static string CreateGroupRemarks {
            get {
                return ResourceManager.GetString("CreateGroupRemarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a new mentionable group with the name given by the roleName parameter..
        /// </summary>
        internal static string CreateGroupSummary {
            get {
                return ResourceManager.GetString("CreateGroupSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns a list of available commands and their parameters, or if specified, details about a specific command..
        /// </summary>
        internal static string HelpSummary {
            get {
                return ResourceManager.GetString("HelpSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command will fail if you try to join an unjoinable group..
        /// </summary>
        internal static string JoinGroupRemarks {
            get {
                return ResourceManager.GetString("JoinGroupRemarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use to add yourself to an existing mentionable group..
        /// </summary>
        internal static string JoinGroupSummary {
            get {
                return ResourceManager.GetString("JoinGroupSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use to leave a mentionable group that you are currently part of..
        /// </summary>
        internal static string LeaveGroupSummary {
            get {
                return ResourceManager.GetString("LeaveGroupSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command will fail if you are not part of the group, or if you do not have permission to leave the specified role..
        /// </summary>
        internal static string LeaveGrroupRemarks {
            get {
                return ResourceManager.GetString("LeaveGrroupRemarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays a list of all the available mentionable groups that you can join..
        /// </summary>
        internal static string ListGroupsSummary {
            get {
                return ResourceManager.GetString("ListGroupsSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1) You can only use this command with either a url of the image, or a single image attachment (cannot use both).\r\n\r\n2) To use the command with an image upload, first upload the image as an attachment to the bot channel. When it asks you type in an optional message with the attachment, enter the command.\r\n\r\n3) To use the command with a url of the image, you must ensure the url is a direct url to the image.\r\n\r\n4) If you upload an emoji with a shortcut name matching one that is already pending, the [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RequestEmojiRemarks {
            get {
                return ResourceManager.GetString("RequestEmojiRemarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this command to request an emoji to be added to the server. Emojis can either be provided by direct upload, or a direct url to an image..
        /// </summary>
        internal static string RequestEmojiSummary {
            get {
                return ResourceManager.GetString("RequestEmojiSummary", resourceCulture);
            }
        }
    }
}
